---
title: "project2"
format: html
editor: visual
---

## Project 2

Team Members:

-   Mateo Bandala Jacques \| abandal1\@jh.edu

-   Mar√≠a Camila Restrepo \| mrestre\@jh.edu

# Part 1

```{r}
#Set-up to obtain the data 
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("tidycensus")) install.packages("tidycensus")
if (!require("RColorBrewer")) install.packages("RColorBrewer")

library(tidycensus)
library(tidyverse)
library(purrr)
library(lubridate)
library(RColorBrewer)

census_api_key("0197bfb814c966dc864f07a942ef2b02795a5f28")


#Study question: 


#First, we will create a function to make it easier to extract the populatio data we're intested in

GET_CENSUS_ACS <- function(state, year) {
    if (!is.numeric(year)) {
    stop("The 'year' argument must be numeric")
    }
  
    if (!(state %in% state.abb)) {
    stop("The 'state' argument must be a valid two-letter state code.")
  }
  
  data <- get_acs(
    geography = "county",
    variables = c(
      medincome = "B19013_001", 
      total_pop = "B01003_001", 
      white = "B02001_002", 
      black = "B02001_003", 
      aian = "B02001_004",
      asian = "B02001_005", 
      nhpi = "B02001_006", 
      other = "B02001_007"
    ), 
    state = state, 
    year = year
  )
  
  return(data)
}

```

::: callout-note
## Let's use our first function from map

We will use it to pull Maryland data for the years 2010, 2015, and 2020
:::

```{r}
#Now using our function, let's pull the data using one of the MAP functions

years <- c(2010, 2015, 2020)
MD_LIST <- map(years, ~ GET_CENSUS_ACS("MD", .x))
names(MD_LIST) <- paste0("md_", years)
```

::: callout-note
## Above, we have made three calls to the census API
:::

```{r}

# Now, let's clear the data


# Using our second MAP function, let's add the year to each of the items in the list
MD_LIST <- imap(MD_LIST, ~ mutate(.x, year = as.integer(gsub("md_", "", .y))))



#Next, we will turn them into data frames, append them, and clean the county names, so that they are easier to see in a plot
md_2010 <- MD_LIST[["md_2010"]]
md_2015 <- MD_LIST[["md_2015"]]
md_2020 <- MD_LIST[["md_2020"]]


MD_COMBINED <- rbind(md_2010, md_2015, md_2020)


#Now, with tidyverse functions, clean the county names
MD_COMBINED <- MD_COMBINED %>%
  mutate(NAME = str_replace(NAME, " County, Maryland", "")) %>%
  mutate(NAME = str_replace(NAME, " city, Maryland", " City")) 


#For our first plot, let's explore how much median income has changed for each county in each of the years


####### This is just to reorder the counties in a way that makes sense
county_order <- MD_COMBINED %>%
  filter(variable == "medincome", year == 2020) %>%
  group_by(NAME) %>%
  summarize(mean_income_2015 = mean(estimate, na.rm = TRUE)) %>%
  arrange(desc(mean_income_2015)) %>%
  pull(NAME)

# Reorder NAME based on mean income in 2020 for the plot)
MD_COMBINED <- MD_COMBINED %>%
  mutate(NAME = factor(NAME, levels = county_order))


MD_COMBINED %>%
  filter(variable=="medincome")%>%
ggplot(aes(x = factor(year), y = estimate, color = NAME, group = NAME)) +
  geom_point() +
  geom_path()+
  labs(
    title = "Median Income Change Over Time by County",
    subtitle = "Legend ordered by median income in 2020",
    caption = paste0("Plot generated on ",today()),
    x = "Year",
    y = "Median Income (USD)",
    color = "County"
  ) +
    theme(
    plot.title = element_text(hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )


```

::: callout-note
## Now, let's explore if race distribution is associated to median income
:::

```{r}
#First, let's explore the race distribution by county

MD_RACE_PERCENT <- MD_COMBINED %>%
  filter(variable %in% c("total_pop", "white", "black", "aian", "asian", "nhpi", "other")) %>%
  group_by(GEOID, NAME, year) %>%
  mutate(
    percentage = ifelse(variable == "total_pop", NA, (estimate / estimate[variable == "total_pop"]) * 100)
  ) %>%
  filter(variable != "total_pop") %>%
  ungroup() %>%
  mutate(
    race = fct_recode(variable,
                      "White" = "white",
                      "Black" = "black",
                      "American Indian/Alaska Native" = "aian",
                      "Asian" = "asian",
                      "Native Hawaiian/Pacific Islander" = "nhpi",
                      "Other" = "other"))

#Reorder the variable by peecentage white
county_order <- MD_RACE_PERCENT %>%
  filter(variable == "white", year == 2020) %>%
  arrange(desc(percentage)) %>%
  pull(NAME)

# Reorder NAME based on mean income in 2020 for the plot)
MD_RACE_PERCENT <- MD_RACE_PERCENT %>%
  mutate(NAME = factor(NAME, levels = county_order))


MD_RACE_PERCENT %>%
  filter(year==2020)%>%
  ggplot(aes(x = NAME, y = percentage, fill = race)) +
  geom_bar(stat = "identity", position = "fill") +
  labs(
    title = "Racial Composition by County",
    subtitle = "Data from the 2020 ACS",
    x = "County",
    y = "Percentage of Total Population",
    fill = "Race",
    caption  = paste0("Plot generated on ", today())
  ) +
  scale_fill_brewer(palette="Dark2")+
  scale_y_continuous(labels = scales::percent_format()) +
    theme(
    plot.title = element_text(hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5),
    axis.text.x = element_text(angle = 45, hjust = 1))



# finally, let's explore if racial composition is associated to median income



MD_PERCENT <- MD_COMBINED %>%
  filter(variable %in% c("total_pop", "white", "black", "aian", "asian", "nhpi", "other", "medincome")) %>%
  select(GEOID, NAME, year, variable, estimate) %>%
  pivot_wider(names_from = variable, values_from = estimate) %>%
  filter(!is.na(total_pop), !is.na(medincome)) %>%
  mutate(
    perc_white = (white / total_pop) * 100,
    perc_black = (black / total_pop) * 100,
    perc_aian = (aian / total_pop) * 100,
    perc_asian = (asian / total_pop) * 100,
    perc_nhpi = (nhpi / total_pop) * 100,
    perc_other = (other / total_pop) * 100
  )   


ggplot(MD_PERCENT, aes(x = perc_black, y = medincome)) +
  geom_point(aes(color = NAME), alpha = 0.7) +
  geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Add a linear trend line
  labs(
    title = "Association between Percentage of Black Population and Median Income",
    subtitle = "Each point represents a county",
    x = "Percentage of Black Population",
    y = "Median Income (USD)",
    color = "County"
  ) +
  theme_minimal()


```
